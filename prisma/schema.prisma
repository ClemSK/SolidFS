// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) @unique
  address String @db.VarChar(200)
  email String @db.VarChar(50)
    emailVerified DateTime?
  image         String?

  pw String @db.VarChar(50)
  createdDate DateTime   @default(now())
  ordrs Ordr[]
  accounts      Account[]
  sessions      Session[]
}
model Product {
	id Int      @id @default(autoincrement())
    name String @db.VarChar(50)
    price Int @db.Integer
    stock Int @db.Integer
    ordrs Ordr[]
}

model Ordr {
  id Int      @id @default(autoincrement()) @db.Integer
  odate DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @db.Integer


  product Product @relation(fields: [productId], references: [id])
  productId Int @db.Integer

  items Item[]
}

model Item {
  id Int      @id @default(autoincrement())

  ordr Ordr      @relation(fields: [ordrId], references: [id])
  ordrId Int @db.Integer

  prod String @db.VarChar(100)
  qty Int @db.Integer
  session DateTime   @default(now())
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_in        Int?  // add expires_at Int? - if you are using Github
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}




